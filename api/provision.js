// api/provision.js
// Vercel serverless: receive form data -> ask Claude for files -> save to GitHub at sites/<subdomain>/

export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') return res.status(405).json({ error: 'POST only' });

    const { shopName, subdomain, email, phone, template } = req.body || {};
    if (!shopName || !subdomain || !email || !phone || !template) {
      return res.status(400).json({ error: 'Missing fields' });
    }
    if (!/^[a-z0-9-]{3,40}$/.test(subdomain)) {
      return res.status(400).json({ error: 'Invalid subdomain' });
    }

    // ---------- 1) Ask Claude to generate minimal static site files ----------
    const prompt = `
Return ONLY a JSON object with this exact shape (no backticks, no prose):
{"files":[{"path":"index.html","content":"..."},{"path":"styles.css","content":"..."}]}

Rules:
- Theme: "${template}".
- Shop name: "${shopName}".
- Contact email: "${email}", phone: "${phone}".
- Pure static HTML/CSS (no frameworks/build). index.html must link "./styles.css".
- Include: header, hero with shop name, hours section, contact (email + phone), footer.
- Keep CSS concise, mobile-first, use system fonts.
`;

    const claudeResp = await fetch("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "x-api-key": process.env.CLAUDE_API_KEY,
        "anthropic-version": "2023-06-01",
        "content-type": "application/json"
      },
      body: JSON.stringify({
        model: "claude-3-5-sonnet-latest",
        max_tokens: 2000,
        messages: [{ role: "user", content: prompt }]
      })
    });

    if (!claudeResp.ok) {
      const t = await claudeResp.text();
      return res.status(502).json({ error: "Claude API error", details: t.slice(0, 400) });
    }

    const claudeJson = await claudeResp.json();
    const raw = claudeJson?.content?.[0]?.text || "{}";

    let files;
    try {
      const parsed = JSON.parse(raw);
      files = parsed.files;
    } catch {
      return res.status(500).json({ error: "Could not parse Claude JSON output" });
    }

    if (!Array.isArray(files) || files.length === 0) {
      return res.status(500).json({ error: "Claude returned no files" });
    }

    // ---------- 2) Save files to GitHub under sites/<subdomain>/ ----------
    const owner = process.env.GH_OWNER;            // e.g. "BZempel"
    const repo  = process.env.GH_REPO;             // e.g. "cloudfrontnow-sites"
    const token = process.env.GH_TOKEN;            // your fine-grained token
    const branch = "main";
    const basePath = `sites/${subdomain}`;

    // Check if folder already exists (prevents overwrite)
    {
      const r = await fetch(
        `https://api.github.com/repos/${owner}/${repo}/contents/${encodeURIComponent(basePath)}?ref=${branch}`,
        { headers: { Authorization: `Bearer ${token}`, "User-Agent": "cloudfrontnow" } }
      );
      if (r.status === 200) return res.status(409).json({ error: "Subdomain already exists" });
      if (r.status !== 404 && r.status !== 200) {
        const txt = await r.text();
        return res.status(502).json({ error: "GitHub folder check failed", details: txt.slice(0, 300) });
      }
    }

    // Create each file (GitHub Contents API creates the commit automatically)
    for (const f of files) {
      const path = `${basePath}/${f.path}`.replace(/\/+/g, "/");
      const contentB64 = Buffer.from(f.content, "utf8").toString("base64");

      const putResp = await fetch(
        `https://api.github.com/repos/${owner}/${repo}/contents/${encodeURIComponent(path)}`,
        {
          method: "PUT",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
            "User-Agent": "cloudfrontnow"
          },
          body: JSON.stringify({
            message: `Add ${path} for ${subdomain}`,
            content: contentB64,
            branch
          })
        }
      );

      if (!putResp.ok) {
        const txt = await putResp.text();
        return res.status(502).json({ error: "GitHub write failed", details: txt.slice(0, 400) });
      }
    }

    // Done
    return res.json({
      ok: true,
      repo: `${owner}/${repo}`,
      path: `${basePath}/`,
      note: "Files generated by Claude and committed to GitHub."
    });

  } catch (e) {
    console.error(e);
    return res.status(500).json({ error: "Server error" });
  }
}
